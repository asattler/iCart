<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600" initialize="getRecipes();">

	<fx:Script>
		<![CDATA[
			import events.HttpRequestEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.IFlexDisplayObject;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			
			import recipe.ExportAsCart;
			import recipe.RecipeExport;
			import recipe.RecipeImport;
			
			import views.dialogs.RecipeAddExternal;
			import views.dialogs.RecipeAddOwn;
			import views.dialogs.RecipeEdit;
			
			include "../user/Logout.as";
		
		
			public var ing_data:Array = [];
			public var recipes_data:Array = [];
			
			[Bindable]
			public var initDG:ArrayCollection;

			private function showExternalSourceDialog():void
			{
				var extSrcDialog:IFlexDisplayObject = PopUpManager.createPopUp(this,
					RecipeAddExternal, true);
				PopUpManager.centerPopUp(extSrcDialog);
				extSrcDialog.addEventListener(Event.CLOSE, handleClosedWindow);
				
			}
			
			private function showInternalSourceDialog():void
			{
				var intSrcDialog:IFlexDisplayObject = PopUpManager.createPopUp(this,
					RecipeAddOwn, true);
				PopUpManager.centerPopUp(intSrcDialog);
				intSrcDialog.addEventListener(Event.CLOSE, handleClosedWindow);
			}
			
			private function showEditInternalDialog():void
			{
				if(recipes.selectedIndices.length > 1) Alert.show("You may only edit one recipe at a time");
				else {
					var editIntDialog:RecipeEdit = RecipeEdit(PopUpManager.createPopUp(this,
					RecipeEdit, true));
					editIntDialog.myRecipe = recipes_data[recipes.selectedIndex];
					PopUpManager.centerPopUp(editIntDialog);
					editIntDialog.addEventListener(Event.CLOSE, handleClosedWindow);
					editIntDialog.init();
				}
			}

			private function backToOverview():void
			{
				parentApplication.currentState = "LoggedIn";
			}
			
			private function handleClosedWindow(evt:Event):void{
				getRecipes()
			}
			
			private function initData():void{
				initDG = new ArrayCollection(ing_data);
			}
			
			public function getRecipes():void{
				CursorManager.setBusyCursor();
				
				var httpRequest:HttpRequests = new HttpRequests();
				httpRequest.getRecipesRequest();
				httpRequest.addEventListener(HttpRequestEvent.GET_RECIPES_EVENT, checkGetRecipes);
			}
			
			private function checkGetRecipes(evt:HttpRequestEvent):void{
				CursorManager.removeBusyCursor();
				var data:Object = JSON.decode(evt.eventData);
				if(data.success == false)
				{
					Alert.show(data.description);
				}
				else
				{
					ing_data = [];
					for(var i:int = 0; i < data.length; i++){
						recipes_data.push({id: data[i].id, name:data[i].name, ingredients:data[i].ingredients, amountPortion:data[i].amountPortion});
						ing_data.push({name:data[i].name});
					}
					deleteButton.enabled = false;
					modifyButton.enabled = false;
					shoppingListButton.enabled = false;
					initDG = new ArrayCollection(ing_data);
				}		
				
			}
			

			private function exportRecipe():void
			{
				var myRecipeExport:RecipeExport = new RecipeExport();
				
			}
			
			private function importRecipes():void
			{
				var myRecipeImport:RecipeImport = new RecipeImport();	
			}
			

			private function onItemClick(event:ListEvent):void
			{
				deleteButton.enabled = true;
				modifyButton.enabled = true;
				shoppingListButton.enabled = true;
			}
			
			private function generateShoppingList():void
			{
				var data : Array = new Array();
				for(var i:int = 0; i < recipes.selectedIndices.length; i++){
					for(var o:int = 0; o < recipes_data[recipes.selectedIndices[i]]['ingredients'].length; o++){
						data.push({name:recipes_data[recipes.selectedIndices[i]]['ingredients'][o]['name'], amount:recipes_data[recipes.selectedIndices[i]]['ingredients'][o]['amount']});
					}						
					
				}
				new ExportAsCart(data);
			}

			private function getIdTodeleteRecipe():void
			{
				if(recipes.selectedIndices.length > 1) Alert.show("You may only delete one Recipe at a time");
				else {
				var id : int = recipes_data[recipes.selectedIndex].id;
				
				
					CursorManager.setBusyCursor();
					var httpRequest:HttpRequests = new HttpRequests();
					httpRequest.deleteRecipeRequest("{id:"+id+"}");
					httpRequest.addEventListener(HttpRequestEvent.DELETE_RECIPE_EVENT, deleteRecipe);
				}
			}
			private function deleteRecipe(evt:HttpRequestEvent):void
			{
				CursorManager.removeBusyCursor();
				getRecipes();
			
			}
			
			private function filterGrid(s:String):void
			{
				var data : Array;
				if(s.length == 0){
					data = ing_data;
				}
				else {
					data = [];
					for(var i:int = 0; i < ing_data.length; i++){
						if(ing_data[i].name.toString().toLowerCase().indexOf(s.toLowerCase()) !== -1){
							data.push(ing_data[i]);
						}
					}
				}
				initDG = new ArrayCollection(data);
			}
		]]>
	</fx:Script>
	
	<s:Button x="720" y="10" label="Logout" click="sendLogout();"/>
	<s:Button x="39" y="61" label="Add own recipe" click="showInternalSourceDialog()"/>
	<s:Button x="174" y="61" label="Add recipe from external source" click="showExternalSourceDialog()"/>
	<s:Button x="400" y="61" label="Import recipes" click="importRecipes();"/>
	<s:Button x="539" y="61" label="Export recipes" click="exportRecipe();"/>
	
	<mx:DataGrid x="38" y="185" width="600" height="327" id="recipes" dataProvider="{initDG}"  itemClick="onItemClick(event);" editable="false" allowMultipleSelection="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Name" dataField="name" width="500"/>
		</mx:columns>
	</mx:DataGrid>
	
	<s:Button x="568" y="156" label="Delete" id="deleteButton" enabled="false" click="getIdTodeleteRecipe()"/>
	<s:Button x="474" y="156" label="View/Modify" id="modifyButton" enabled="false" click="showEditInternalDialog()"/>
	<s:Button x="313" y="156" label="Generate Shopping List" id="shoppingListButton" enabled="false" click="generateShoppingList()"/>
	<s:Label x="186" y="162" text="Selected Element(s):"/>
	<s:Label x="421" y="121" text="Search: "/>
	<s:TextInput x="490" y="116" width="148" id="search" change="filterGrid(search.text);"/>
	<s:Button x="720" y="39" label="Back" click="backToOverview()"/>
</s:Group>
